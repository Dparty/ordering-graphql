package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/Dparty/common/utils"
	restaurantModel "github.com/Dparty/model/restaurant"
	"github.com/Dparty/ordering-graphql/graph/model"
)

// Restaurant is the resolver for the restaurant field.
func (r *queryResolver) Restaurant(ctx context.Context, id string) (*model.Restaurant, error) {
	restaurant := restaurantModel.FindRestaurant(utils.StringToUint(id))
	if restaurant == nil {
		return nil, nil
	}
	return &model.Restaurant{
		ID:          utils.UintToString(restaurant.ID),
		Name:        restaurant.Name,
		Description: restaurant.Description,
	}, nil
}

// Table is the resolver for the table field.
func (r *queryResolver) Table(ctx context.Context, id string) (*model.Table, error) {
	table, err := restaurantModel.FindTable(id)
	if err != nil {
		return nil, err
	}
	t := model.Convert(table).(model.Table)
	return &t, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
